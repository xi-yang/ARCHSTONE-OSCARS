package net.es.oscars.nsibridge.soap.gen.provider;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 2.4.2
 * 2011-11-10T17:55:55.534-08:00
 * Generated source version: 2.4.2
 * 
 */
@WebService(targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/provider", name = "ConnectionProviderPort")
@XmlSeeAlso({org.ogf.nsi.schema.connectionTypes.ObjectFactory.class, oasis.names.tc.saml._2_0.assertion.ObjectFactory.class, org.w3._2000._09.xmldsig.ObjectFactory.class, org.w3._2001._04.xmlenc.ObjectFactory.class, net.es.oscars.nsibridge.soap.gen.ifce.ObjectFactory.class})
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface ConnectionProviderPort {

    /**
     * The terminate message is sent from a Requester NSA to a Provider
     * NSA when an existing reservation is to be terminated. The
     * terminateACK indicates that the Provider NSA has accepted the
     * terminate request for processing. A terminateConfirmed or
     * terminateFailed message will be sent asynchronously to the Requester
     * NSA when terminate processing has completed.
     *             
     */
    @WebResult(name = "acknowledgment", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface", partName = "result")
    @WebMethod(action = "http://schemas.ogf.org/nsi/2011/10/connection/service/terminate")
    public net.es.oscars.nsibridge.soap.gen.ifce.GenericAcknowledgmentType terminate(
        @WebParam(partName = "parameters", name = "terminateRequest", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface")
        net.es.oscars.nsibridge.soap.gen.ifce.TerminateRequestType parameters
    ) throws net.es.oscars.nsibridge.soap.gen.ifce.ServiceException;

    /**
     * The provision message is sent from a Requester NSA to a Provider
     * NSA when an existing reservation is to be transitioned into a
     * provisioned state. The provisionACK indicates that the Provider
     * NSA has accepted the provision request for processing. A
     * provisionConfirmed or provisionFailed message will be sent
     * asynchronously to the Requester NSA when provision processing
     * has completed.
     *             
     */
    @WebResult(name = "acknowledgment", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface", partName = "result")
    @WebMethod(action = "http://schemas.ogf.org/nsi/2011/10/connection/service/provision")
    public net.es.oscars.nsibridge.soap.gen.ifce.GenericAcknowledgmentType provision(
        @WebParam(partName = "parameters", name = "provisionRequest", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface")
        net.es.oscars.nsibridge.soap.gen.ifce.ProvisionRequestType parameters
    ) throws net.es.oscars.nsibridge.soap.gen.ifce.ServiceException;

    /**
     * The reserve message is sent from a Requester NSA to a Provider
     * NSA when a new reservation is being requested. The reserveACK
     * indicates that the Provider NSA has accepted the reservation
     * request for processing. A reserveConfirmed or reserveFailed
     * message will be sent asynchronously to the Requester NSA
     * when reservation processing has completed.
     *             
     */
    @WebResult(name = "acknowledgment", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface", partName = "result")
    @WebMethod(action = "http://schemas.ogf.org/nsi/2011/10/connection/service/reserve")
    public net.es.oscars.nsibridge.soap.gen.ifce.GenericAcknowledgmentType reserve(
        @WebParam(partName = "parameters", name = "reserveRequest", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface")
        net.es.oscars.nsibridge.soap.gen.ifce.ReserveRequestType parameters
    ) throws net.es.oscars.nsibridge.soap.gen.ifce.ServiceException;

    /**
     * The release message is sent from a Requester NSA to a Provider NSA
     * when an existing reservation is to be transitioned into a released
     * state. The releaseACK indicates that the Provider NSA has
     * accepted the release request for processing. A releaseConfirmed
     * or releaseFailed message will be sent asynchronously to the
     * Requester NSA when release processing has completed.
     *             
     */
    @WebResult(name = "acknowledgment", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface", partName = "result")
    @WebMethod(action = "http://schemas.ogf.org/nsi/2011/10/connection/service/release")
    public net.es.oscars.nsibridge.soap.gen.ifce.GenericAcknowledgmentType release(
        @WebParam(partName = "parameters", name = "releaseRequest", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface")
        net.es.oscars.nsibridge.soap.gen.ifce.ReleaseRequestType parameters
    ) throws net.es.oscars.nsibridge.soap.gen.ifce.ServiceException;

    /**
     * This queryConfirmed message is sent from the target NSA to requesting
     * NSA as an indication of a successful query operation. This is in
     * response to an original query request from the associated Requester
     * NSA.
     *             
     */
    @WebResult(name = "acknowledgment", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface", partName = "result")
    @WebMethod(action = "http://schemas.ogf.org/nsi/2011/10/connection/service/queryConfirmed")
    public net.es.oscars.nsibridge.soap.gen.ifce.GenericAcknowledgmentType queryConfirmed(
        @WebParam(partName = "parameters", name = "queryConfirmed", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface")
        net.es.oscars.nsibridge.soap.gen.ifce.QueryConfirmedRequestType parameters
    ) throws net.es.oscars.nsibridge.soap.gen.ifce.ServiceException;

    /**
     * This queryFailed message is sent from the target NSA to requesting
     * NSA as an indication of a query operation failure. This is in
     * response to an original query request from the associated
     * Requester NSA.
     *             
     */
    @WebResult(name = "acknowledgment", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface", partName = "result")
    @WebMethod(action = "http://schemas.ogf.org/nsi/2011/10/connection/service/queryFailed")
    public net.es.oscars.nsibridge.soap.gen.ifce.GenericAcknowledgmentType queryFailed(
        @WebParam(partName = "parameters", name = "queryFailed", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface")
        net.es.oscars.nsibridge.soap.gen.ifce.QueryFailedRequestType parameters
    ) throws net.es.oscars.nsibridge.soap.gen.ifce.ServiceException;

    /**
     * The query message can be sent from either a Provider or Requester NSA
     * to determine the status of existing reservations.  The queryACK
     * indicates that the target NSA has accepted the query request for
     * processing. A queryConfirmed or queryFailed message will be sent
     * asynchronously to the requesting NSA when query processing has
     * completed.
     *             
     */
    @WebResult(name = "acknowledgment", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface", partName = "result")
    @WebMethod(action = "http://schemas.ogf.org/nsi/2011/10/connection/service/query")
    public net.es.oscars.nsibridge.soap.gen.ifce.GenericAcknowledgmentType query(
        @WebParam(partName = "parameters", name = "queryRequest", targetNamespace = "http://schemas.ogf.org/nsi/2011/10/connection/interface")
        net.es.oscars.nsibridge.soap.gen.ifce.QueryRequestType parameters
    ) throws net.es.oscars.nsibridge.soap.gen.ifce.ServiceException;
}
